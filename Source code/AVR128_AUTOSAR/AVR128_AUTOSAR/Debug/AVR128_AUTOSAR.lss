
AVR128_AUTOSAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000003de  00000472  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800124  00800124  00000496  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c31  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fd4  00000000  00000000  00002355  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ea1  00000000  00000000  00003329  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  000041cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000087d  00000000  00000000  00004534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008dc  00000000  00000000  00004db1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000568d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ed       	ldi	r30, 0xDE	; 222
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 32       	cpi	r26, 0x2D	; 45
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0f d1       	rcall	.+542    	; 0x2e2 <main>
  c4:	8a c1       	rjmp	.+788    	; 0x3da <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Apl_mainTaskStateInit>:
#include "Apl_Public_Variable.h"


void Apl_mainTaskStateInit(void)
{
	Apl_gpioCurrentSts = APL_TASKLISTIDLE;
  c8:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <Apl_gpioCurrentSts>
	Apl_setEvt(Apl_gpioCurrentSts);
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	51 c0       	rjmp	.+162    	; 0x172 <Apl_setEvt>
  d0:	08 95       	ret

000000d2 <Apl_networkInit>:
	return;
}

void Apl_networkInit(void)
{
	memset((void*)Apl_BufferRead, ZERO, sizeof(Apl_BufferRead));
  d2:	84 e0       	ldi	r24, 0x04	; 4
  d4:	e8 e2       	ldi	r30, 0x28	; 40
  d6:	f1 e0       	ldi	r31, 0x01	; 1
  d8:	df 01       	movw	r26, r30
  da:	98 2f       	mov	r25, r24
  dc:	1d 92       	st	X+, r1
  de:	9a 95       	dec	r25
  e0:	e9 f7       	brne	.-6      	; 0xdc <Apl_networkInit+0xa>
	memset((void*)Apl_BufferWrite, ZERO, sizeof(Apl_BufferWrite));
  e2:	e4 e2       	ldi	r30, 0x24	; 36
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	df 01       	movw	r26, r30
  e8:	1d 92       	st	X+, r1
  ea:	8a 95       	dec	r24
  ec:	e9 f7       	brne	.-6      	; 0xe8 <Apl_networkInit+0x16>
  ee:	08 95       	ret

000000f0 <Apl_Init>:
	return;	
}

void Apl_Init(void)
{
	BSW_driverInit();
  f0:	8f d0       	rcall	.+286    	; 0x210 <BSW_driverInit>
	Apl_networkInit();
  f2:	ef df       	rcall	.-34     	; 0xd2 <Apl_networkInit>
	Apl_mainTaskStateInit();
  f4:	e9 cf       	rjmp	.-46     	; 0xc8 <Apl_mainTaskStateInit>
  f6:	08 95       	ret

000000f8 <Apl_gpioChangeState>:
  f8:	cf 93       	push	r28
	}
};


void Apl_gpioChangeState(uint16 currenstate)
{
  fa:	df 93       	push	r29
  fc:	ec 01       	movw	r28, r24
	uint16 u2a_currentState;
	
	u2a_currentState = currenstate;
	
	if (STATE_MAXNUMBER <= currenstate) {
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	91 05       	cpc	r25, r1
 102:	98 f0       	brcs	.+38     	; 0x12a <Apl_gpioChangeState+0x32>
		Apl_stateMachine[currenstate][8](u2a_currentState);
 104:	fc 01       	movw	r30, r24
 106:	ee 0f       	add	r30, r30
 108:	ff 1f       	adc	r31, r31
 10a:	cf 01       	movw	r24, r30
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	e8 0f       	add	r30, r24
 11a:	f9 1f       	adc	r31, r25
 11c:	e0 50       	subi	r30, 0x00	; 0
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	00 88       	ldd	r0, Z+16	; 0x10
 122:	f1 89       	ldd	r31, Z+17	; 0x11
 124:	e0 2d       	mov	r30, r0
 126:	ce 01       	movw	r24, r28
 128:	09 95       	icall
	}
	
	
	if (2 < u2a_currentState) {
 12a:	c3 30       	cpi	r28, 0x03	; 3
 12c:	d1 05       	cpc	r29, r1
 12e:	18 f4       	brcc	.+6      	; 0x136 <Apl_gpioChangeState+0x3e>

void Apl_gpioChangeState(uint16 currenstate)
{
	uint16 u2a_currentState;
	
	u2a_currentState = currenstate;
 130:	2c 2f       	mov	r18, r28
 132:	3d 2f       	mov	r19, r29
 134:	02 c0       	rjmp	.+4      	; 0x13a <Apl_gpioChangeState+0x42>
		Apl_stateMachine[currenstate][8](u2a_currentState);
	}
	
	
	if (2 < u2a_currentState) {
		u2a_currentState = APL_TASKLISTIDLE;
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	Apl_gpioCurrentSts = u2a_currentState;
 13a:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <Apl_gpioCurrentSts>
	
	if (NULL != Apl_stateMachine[u2a_currentState][7]) {
 13e:	82 2f       	mov	r24, r18
 140:	93 2f       	mov	r25, r19
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	fc 01       	movw	r30, r24
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	ee 0f       	add	r30, r30
 14e:	ff 1f       	adc	r31, r31
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	8e 0f       	add	r24, r30
 156:	9f 1f       	adc	r25, r31
 158:	fc 01       	movw	r30, r24
 15a:	e0 50       	subi	r30, 0x00	; 0
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	06 84       	ldd	r0, Z+14	; 0x0e
 160:	f7 85       	ldd	r31, Z+15	; 0x0f
 162:	e0 2d       	mov	r30, r0
 164:	30 97       	sbiw	r30, 0x00	; 0
 166:	11 f0       	breq	.+4      	; 0x16c <Apl_gpioChangeState+0x74>
		Apl_stateMachine[u2a_currentState][7](currenstate);
 168:	ce 01       	movw	r24, r28
 16a:	09 95       	icall
	}
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <Apl_setEvt>:

void Apl_setEvt(uint8 currentSts) {
	if (NULL != Apl_stateMachine[currentSts][7]) {
 172:	e8 2f       	mov	r30, r24
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	9f 01       	movw	r18, r30
 17c:	22 0f       	add	r18, r18
 17e:	33 1f       	adc	r19, r19
 180:	22 0f       	add	r18, r18
 182:	33 1f       	adc	r19, r19
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	e2 0f       	add	r30, r18
 18a:	f3 1f       	adc	r31, r19
 18c:	e0 50       	subi	r30, 0x00	; 0
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	06 84       	ldd	r0, Z+14	; 0x0e
 192:	f7 85       	ldd	r31, Z+15	; 0x0f
 194:	e0 2d       	mov	r30, r0
 196:	30 97       	sbiw	r30, 0x00	; 0
 198:	11 f0       	breq	.+4      	; 0x19e <Apl_setEvt+0x2c>
		Apl_stateMachine[currentSts][7](currentSts);
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	09 95       	icall
 19e:	08 95       	ret

000001a0 <Apl_mainIdle_EvReqWrite>:
 */

#include "Apl_MainTskIdle.h"

void Apl_mainIdle_EvReqWrite(uint16 currentState)
{
 1a0:	08 95       	ret

000001a2 <Apl_mainIdle_EvReqErase>:

	return;	
}

void Apl_mainIdle_EvReqErase(uint16 currentState)
{
 1a2:	08 95       	ret

000001a4 <Apl_mainIdle_EvReqVerify>:
	return;
}

void Apl_mainIdle_EvReqVerify(uint16 currentState)
{
 1a4:	08 95       	ret

000001a6 <Apl_mainIdle_EvJob>:
	return;
}

void Apl_mainIdle_EvJob(uint16 currentState)
{
 1a6:	08 95       	ret

000001a8 <Apl_mainIdle_entry>:
}


void Apl_mainIdle_entry(uint16 currentState)
{
	PORTE |= (1<<PE4);
 1a8:	83 b1       	in	r24, 0x03	; 3
 1aa:	80 61       	ori	r24, 0x10	; 16
 1ac:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	8f e7       	ldi	r24, 0x7F	; 127
 1b2:	96 e1       	ldi	r25, 0x16	; 22
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <Apl_mainIdle_entry+0xc>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <Apl_mainIdle_entry+0x16>
 1be:	00 00       	nop
	_delay_ms(1000);
	PORTE &= ~(1<<PE4);
 1c0:	83 b1       	in	r24, 0x03	; 3
 1c2:	8f 7e       	andi	r24, 0xEF	; 239
 1c4:	83 b9       	out	0x03, r24	; 3
 1c6:	2f ef       	ldi	r18, 0xFF	; 255
 1c8:	8f e7       	ldi	r24, 0x7F	; 127
 1ca:	96 e1       	ldi	r25, 0x16	; 22
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <Apl_mainIdle_entry+0x24>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <Apl_mainIdle_entry+0x2e>
 1d6:	00 00       	nop
 1d8:	08 95       	ret

000001da <Apl_mainIdle_exit>:
	_delay_ms(1000);
	return;
}

void Apl_mainIdle_exit(uint16 currentState)
{
 1da:	08 95       	ret

000001dc <Apl_mainTask>:

#include <Apl_TaskListMain.h>

void Apl_mainTask(void) {
	
	Apl_gpioChangeState(Apl_gpioCurrentSts);
 1dc:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Apl_gpioCurrentSts>
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	8a cf       	rjmp	.-236    	; 0xf8 <Apl_gpioChangeState>
 1e4:	08 95       	ret

000001e6 <Apl_mainWriteWait_EvEndWrite>:
 */ 

#include "Apl_uartFFSend.h"

void Apl_mainWriteWait_EvEndWrite(uint16 currentState)
{
 1e6:	08 95       	ret

000001e8 <Apl_mainWriteWait_EvJob>:
	return;
}

void Apl_mainWriteWait_EvJob(uint16 currentState)
{
 1e8:	08 95       	ret

000001ea <Apl_mainWriteWait_entry>:
	return;
}

void Apl_mainWriteWait_entry(uint16 currentState)
{
 1ea:	08 95       	ret

000001ec <Apl_mainWriteWait_exit>:
	return;
}

void Apl_mainWriteWait_exit(uint16 currentState)
{
 1ec:	08 95       	ret

000001ee <IO_Init>:
static void IO_Init();
//static void LCD_Init(LiquidCrystalDevice_t* module);
static void f_uartInit(void);

void IO_Init(){
	DDRE = 0xFF;
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	82 b9       	out	0x02, r24	; 2
	DDRD |= (1<<PD4)|(1<<PD5);
 1f2:	81 b3       	in	r24, 0x11	; 17
 1f4:	80 63       	ori	r24, 0x30	; 48
 1f6:	81 bb       	out	0x11, r24	; 17
	
	PORTE = 0x00;
 1f8:	13 b8       	out	0x03, r1	; 3
	PORTD &= ~((1<<PD4)|(1<<PD5));
 1fa:	82 b3       	in	r24, 0x12	; 18
 1fc:	8f 7c       	andi	r24, 0xCF	; 207
 1fe:	82 bb       	out	0x12, r24	; 18
 200:	08 95       	ret

00000202 <f_uartInit>:
// 	*module = lq_init(0x27, 16, 2, LCD_5x8DOTS);
// 	lq_turnOnBacklight(module);
// }

void f_uartInit(void) {
	UART1_Init(9600);
 202:	40 e8       	ldi	r20, 0x80	; 128
 204:	55 e2       	ldi	r21, 0x25	; 37
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	ad c0       	rjmp	.+346    	; 0x368 <UART_Init>
 20e:	08 95       	ret

00000210 <BSW_driverInit>:
	return;
}

void BSW_driverInit(void)
{
	IO_Init();
 210:	ee df       	rcall	.-36     	; 0x1ee <IO_Init>
	//LCD_Init(&device);
	lcd_init();
 212:	33 d0       	rcall	.+102    	; 0x27a <lcd_init>
	f_setchanel(0u);
 214:	80 e0       	ldi	r24, 0x00	; 0
	f_adc_init();
 216:	68 d0       	rcall	.+208    	; 0x2e8 <f_setchanel>
 218:	68 d0       	rcall	.+208    	; 0x2ea <f_adc_init>
	f_uartInit();
 21a:	f3 cf       	rjmp	.-26     	; 0x202 <f_uartInit>
 21c:	08 95       	ret

0000021e <lcd_enable>:
 21e:	8b b3       	in	r24, 0x1b	; 27
	
	lcd_out( data );
	lcd_out( data<<4 );
	
	_delay_us( LCD_WRITEDATA_US );
}
 220:	84 60       	ori	r24, 0x04	; 4
 222:	8b bb       	out	0x1b, r24	; 27
 224:	81 e3       	ldi	r24, 0x31	; 49
 226:	8a 95       	dec	r24
 228:	f1 f7       	brne	.-4      	; 0x226 <lcd_enable+0x8>
 22a:	00 00       	nop
 22c:	8b b3       	in	r24, 0x1b	; 27
 22e:	8b 7f       	andi	r24, 0xFB	; 251
 230:	8b bb       	out	0x1b, r24	; 27
 232:	08 95       	ret

00000234 <lcd_out>:
 234:	80 7f       	andi	r24, 0xF0	; 240
 236:	9b b3       	in	r25, 0x1b	; 27
 238:	97 78       	andi	r25, 0x87	; 135
 23a:	9b bb       	out	0x1b, r25	; 27
 23c:	9b b3       	in	r25, 0x1b	; 27
 23e:	86 95       	lsr	r24
 240:	89 2b       	or	r24, r25
 242:	8b bb       	out	0x1b, r24	; 27
 244:	ec cf       	rjmp	.-40     	; 0x21e <lcd_enable>
 246:	08 95       	ret

00000248 <lcd_command>:

void lcd_command( uint8 data )
{
 248:	cf 93       	push	r28
 24a:	c8 2f       	mov	r28, r24
	LCD_PORT &= ~(1<<LCD_RS);
 24c:	8b b3       	in	r24, 0x1b	; 27
 24e:	8e 7f       	andi	r24, 0xFE	; 254
 250:	8b bb       	out	0x1b, r24	; 27
	
	lcd_out( data );
 252:	8c 2f       	mov	r24, r28
 254:	ef df       	rcall	.-34     	; 0x234 <lcd_out>
	lcd_out( data<<4 );
 256:	8c 2f       	mov	r24, r28
 258:	82 95       	swap	r24
 25a:	80 7f       	andi	r24, 0xF0	; 240
 25c:	eb df       	rcall	.-42     	; 0x234 <lcd_out>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	87 e6       	ldi	r24, 0x67	; 103
 260:	8a 95       	dec	r24
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd_command+0x18>
 264:	00 00       	nop
	
	_delay_us( LCD_COMMAND_US );
}
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <lcd_clear>:

void lcd_clear( void )
{
	lcd_command( LCD_CLEAR_DISPLAY );
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	ed df       	rcall	.-38     	; 0x248 <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	86 e6       	ldi	r24, 0x66	; 102
 270:	9e e0       	ldi	r25, 0x0E	; 14
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <lcd_clear+0x8>
 276:	00 00       	nop
 278:	08 95       	ret

0000027a <lcd_init>:
void lcd_init( void )
{
	
	uint8 pins = (0x0F << LCD_DB) | (1<<LCD_RS) | (1<<LCD_EN);
	
	LCD_DDR |= pins;
 27a:	8a b3       	in	r24, 0x1a	; 26
 27c:	8d 67       	ori	r24, 0x7D	; 125
 27e:	8a bb       	out	0x1a, r24	; 26
	LCD_DDR |= LCD_RW;
 280:	8a b3       	in	r24, 0x1a	; 26
 282:	81 60       	ori	r24, 0x01	; 1
 284:	8a bb       	out	0x1a, r24	; 26
	
	LCD_PORT &= ~(LCD_RW);
 286:	8b b3       	in	r24, 0x1b	; 27
 288:	8e 7f       	andi	r24, 0xFE	; 254
 28a:	8b bb       	out	0x1b, r24	; 27
	LCD_PORT &= ~pins;
 28c:	8b b3       	in	r24, 0x1b	; 27
 28e:	82 78       	andi	r24, 0x82	; 130
 290:	8b bb       	out	0x1b, r24	; 27
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	9b e6       	ldi	r25, 0x6B	; 107
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <lcd_init+0x1c>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <lcd_init+0x22>
 29c:	00 00       	nop
	
	_delay_ms( LCD_BOOTUP_MS );
	
	lcd_out( LCD_SOFT_RESET );
 29e:	80 e3       	ldi	r24, 0x30	; 48
 2a0:	c9 df       	rcall	.-110    	; 0x234 <lcd_out>
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	93 e2       	ldi	r25, 0x23	; 35
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <lcd_init+0x2c>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <lcd_init+0x32>
	_delay_ms( LCD_SOFT_RESET_MS1 );
	
	lcd_enable();
 2ac:	00 00       	nop
 2ae:	b7 df       	rcall	.-146    	; 0x21e <lcd_enable>
 2b0:	83 e3       	ldi	r24, 0x33	; 51
 2b2:	97 e0       	ldi	r25, 0x07	; 7
 2b4:	01 97       	sbiw	r24, 0x01	; 1
	_delay_ms( LCD_SOFT_RESET_MS2 );
	
	lcd_enable();
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_init+0x3a>
 2b8:	b2 df       	rcall	.-156    	; 0x21e <lcd_enable>
 2ba:	83 e3       	ldi	r24, 0x33	; 51
 2bc:	97 e0       	ldi	r25, 0x07	; 7
 2be:	01 97       	sbiw	r24, 0x01	; 1
	_delay_ms( LCD_SOFT_RESET_MS3 );
	
	lcd_out( LCD_SET_FUNCTION |
 2c0:	f1 f7       	brne	.-4      	; 0x2be <lcd_init+0x44>
 2c2:	80 e2       	ldi	r24, 0x20	; 32
 2c4:	b7 df       	rcall	.-146    	; 0x234 <lcd_out>
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	93 e2       	ldi	r25, 0x23	; 35
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <lcd_init+0x50>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <lcd_init+0x56>
	LCD_FUNCTION_4BIT );
	_delay_ms( LCD_SET_4BITMODE_MS );
	
	lcd_command( LCD_SET_FUNCTION |
 2d0:	00 00       	nop
 2d2:	88 e2       	ldi	r24, 0x28	; 40
	LCD_FUNCTION_4BIT |
	LCD_FUNCTION_2LINE |
	LCD_FUNCTION_5X7 );
	
	lcd_command( LCD_SET_DISPLAY |
 2d4:	b9 df       	rcall	.-142    	; 0x248 <lcd_command>
 2d6:	8c e0       	ldi	r24, 0x0C	; 12
 2d8:	b7 df       	rcall	.-146    	; 0x248 <lcd_command>
	LCD_DISPLAY_ON |
	LCD_CURSOR_OFF |
	LCD_BLINKING_OFF);
	
	lcd_command( LCD_SET_ENTRY |
 2da:	86 e0       	ldi	r24, 0x06	; 6
 2dc:	b5 df       	rcall	.-150    	; 0x248 <lcd_command>
 2de:	c5 cf       	rjmp	.-118    	; 0x26a <lcd_clear>
	LCD_ENTRY_INCREASE |
	LCD_ENTRY_NOSHIFT );
	
	lcd_clear();
 2e0:	08 95       	ret

000002e2 <main>:
#include <Apl_TaskListMain.h>
#include <Apl_Init.h>

int main(void) {

	Apl_Init();
 2e2:	06 df       	rcall	.-500    	; 0xf0 <Apl_Init>
	
	while(1) {
		Apl_mainTask();
 2e4:	7b df       	rcall	.-266    	; 0x1dc <Apl_mainTask>
 2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <main+0x2>

000002e8 <f_setchanel>:
  *         
  * @param
  * @param
  * @retval
  */
void f_setchanel(uint8 chanel) {
 2e8:	08 95       	ret

000002ea <f_adc_init>:
  * @param
  * @retval
  */
void f_adc_init(void)
{
	ADMUX |= ((1 << REFS0) | chanel);
 2ea:	87 b1       	in	r24, 0x07	; 7
 2ec:	80 64       	ori	r24, 0x40	; 64
 2ee:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS0);
 2f0:	86 b1       	in	r24, 0x06	; 6
 2f2:	85 68       	ori	r24, 0x85	; 133
 2f4:	86 b9       	out	0x06, r24	; 6
 2f6:	08 95       	ret

000002f8 <UART_SetBaudRate>:



}
void UART_SetBaudRate(uint8 var_uartChannel_u8, uint32 var_baudRate_u32)
{
 2f8:	cf 93       	push	r28
 2fa:	c8 2f       	mov	r28, r24
    uint16 RegValue;
    if((var_baudRate_u32 >= C_MinBaudRate_U32) && (var_baudRate_u32<=C_MaxBaudRate_U32))
 2fc:	db 01       	movw	r26, r22
 2fe:	ca 01       	movw	r24, r20
 300:	80 56       	subi	r24, 0x60	; 96
 302:	99 40       	sbci	r25, 0x09	; 9
 304:	a1 09       	sbc	r26, r1
 306:	b1 09       	sbc	r27, r1
 308:	81 3a       	cpi	r24, 0xA1	; 161
 30a:	98 4b       	sbci	r25, 0xB8	; 184
 30c:	a1 40       	sbci	r26, 0x01	; 1
 30e:	b1 05       	cpc	r27, r1
 310:	d0 f4       	brcc	.+52     	; 0x346 <UART_SetBaudRate+0x4e>
    {
        RegValue = M_GetBaudRateGeneratorValue(var_baudRate_u32);
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	66 1f       	adc	r22, r22
 318:	77 1f       	adc	r23, r23
 31a:	44 0f       	add	r20, r20
 31c:	55 1f       	adc	r21, r21
 31e:	66 1f       	adc	r22, r22
 320:	77 1f       	adc	r23, r23
 322:	9a 01       	movw	r18, r20
 324:	ab 01       	movw	r20, r22
 326:	22 0f       	add	r18, r18
 328:	33 1f       	adc	r19, r19
 32a:	44 1f       	adc	r20, r20
 32c:	55 1f       	adc	r21, r21
 32e:	22 0f       	add	r18, r18
 330:	33 1f       	adc	r19, r19
 332:	44 1f       	adc	r20, r20
 334:	55 1f       	adc	r21, r21
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	70 e8       	ldi	r23, 0x80	; 128
 33a:	80 e7       	ldi	r24, 0x70	; 112
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	2b d0       	rcall	.+86     	; 0x396 <__udivmodsi4>
 340:	21 50       	subi	r18, 0x01	; 1
 342:	31 09       	sbc	r19, r1
 344:	02 c0       	rjmp	.+4      	; 0x34a <UART_SetBaudRate+0x52>
    }
    else
    {
        RegValue = M_GetBaudRateGeneratorValue(9600);
 346:	26 e4       	ldi	r18, 0x46	; 70
 348:	31 e0       	ldi	r19, 0x01	; 1
    }
    switch(var_uartChannel_u8)
 34a:	cc 23       	and	r28, r28
 34c:	19 f0       	breq	.+6      	; 0x354 <UART_SetBaudRate+0x5c>
 34e:	c1 30       	cpi	r28, 0x01	; 1
 350:	29 f0       	breq	.+10     	; 0x35c <UART_SetBaudRate+0x64>
 352:	08 c0       	rjmp	.+16     	; 0x364 <UART_SetBaudRate+0x6c>
    {
    case 0:
        UBRR0L = util_ExtractByte0to8(RegValue);
 354:	29 b9       	out	0x09, r18	; 9
        UBRR0H = util_ExtractByte8to16(RegValue);
 356:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
        break;
 35a:	04 c0       	rjmp	.+8      	; 0x364 <UART_SetBaudRate+0x6c>
    case 1:
        UBRR1L = util_ExtractByte0to8(RegValue);
 35c:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
        UBRR1H = util_ExtractByte8to16(RegValue);
 360:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
        break;
    }  



}
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <UART_Init>:
#define C_MaxUartChannels_U8 2u
#define C_UartOne_U8         1u

void UART_Init(uint8 var_uartChannel_u8, uint32 var_baudRate_u32)
{    
    switch(var_uartChannel_u8)
 368:	88 23       	and	r24, r24
 36a:	19 f0       	breq	.+6      	; 0x372 <UART_Init+0xa>
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	49 f0       	breq	.+18     	; 0x382 <UART_Init+0x1a>
 370:	08 95       	ret
    {
    case 0:
	
        UCSR0B= (1<<RXEN) | (1<<TXEN);                  
 372:	98 e1       	ldi	r25, 0x18	; 24
 374:	9a b9       	out	0x0a, r25	; 10
        UCSR0C = (0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0); 
 376:	96 e0       	ldi	r25, 0x06	; 6
 378:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
        UCSR0A= 0x00;                                   
 37c:	1b b8       	out	0x0b, r1	; 11
        UART_SetBaudRate(var_uartChannel_u8,var_baudRate_u32);
 37e:	bc cf       	rjmp	.-136    	; 0x2f8 <UART_SetBaudRate>
        break;
 380:	08 95       	ret


    case 1:
	    
        UCSR1B= (1<<RXEN) | (1<<TXEN);                 
 382:	98 e1       	ldi	r25, 0x18	; 24
 384:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
        UCSR1C= (1<<UCSZ1) | (1<<UCSZ0);   
 388:	96 e0       	ldi	r25, 0x06	; 6
 38a:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
        UCSR1A= 0x00;                                   
 38e:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
        UART_SetBaudRate(var_uartChannel_u8,var_baudRate_u32);
 392:	b2 cf       	rjmp	.-156    	; 0x2f8 <UART_SetBaudRate>
 394:	08 95       	ret

00000396 <__udivmodsi4>:
 396:	a1 e2       	ldi	r26, 0x21	; 33
 398:	1a 2e       	mov	r1, r26
 39a:	aa 1b       	sub	r26, r26
 39c:	bb 1b       	sub	r27, r27
 39e:	fd 01       	movw	r30, r26
 3a0:	0d c0       	rjmp	.+26     	; 0x3bc <__udivmodsi4_ep>

000003a2 <__udivmodsi4_loop>:
 3a2:	aa 1f       	adc	r26, r26
 3a4:	bb 1f       	adc	r27, r27
 3a6:	ee 1f       	adc	r30, r30
 3a8:	ff 1f       	adc	r31, r31
 3aa:	a2 17       	cp	r26, r18
 3ac:	b3 07       	cpc	r27, r19
 3ae:	e4 07       	cpc	r30, r20
 3b0:	f5 07       	cpc	r31, r21
 3b2:	20 f0       	brcs	.+8      	; 0x3bc <__udivmodsi4_ep>
 3b4:	a2 1b       	sub	r26, r18
 3b6:	b3 0b       	sbc	r27, r19
 3b8:	e4 0b       	sbc	r30, r20
 3ba:	f5 0b       	sbc	r31, r21

000003bc <__udivmodsi4_ep>:
 3bc:	66 1f       	adc	r22, r22
 3be:	77 1f       	adc	r23, r23
 3c0:	88 1f       	adc	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	1a 94       	dec	r1
 3c6:	69 f7       	brne	.-38     	; 0x3a2 <__udivmodsi4_loop>
 3c8:	60 95       	com	r22
 3ca:	70 95       	com	r23
 3cc:	80 95       	com	r24
 3ce:	90 95       	com	r25
 3d0:	9b 01       	movw	r18, r22
 3d2:	ac 01       	movw	r20, r24
 3d4:	bd 01       	movw	r22, r26
 3d6:	cf 01       	movw	r24, r30
 3d8:	08 95       	ret

000003da <_exit>:
 3da:	f8 94       	cli

000003dc <__stop_program>:
 3dc:	ff cf       	rjmp	.-2      	; 0x3dc <__stop_program>
